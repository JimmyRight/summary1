Utiliser l’interpréteur Python
******************************


Invoquer l’interpréteur
=======================

The Python interpreter is usually installed as "/usr/local/bin/python"
on those machines where it is available; putting "/usr/local/bin" in
your Unix shell’s search path makes it possible to start it by typing
the command

   python

to the shell.  Since the choice of the directory where the interpreter
lives is an installation option, other places are possible; check with
your local Python guru or system administrator.  (E.g.,
"/usr/local/python" is a popular alternative location.)

On Windows machines, the Python installation is usually placed in
"C:\Python27", though you can change this when you’re running the
installer.  To add this directory to your path,  you can type the
following command into the command prompt in a DOS box:

   set path=%path%;C:\python27

Taper un caractère de fin de fichier ("Ctrl-D" sous Unix, "Ctrl-Z"
sous Windows) suive à une invite de commande primaire provoque la
fermeture de l’interpréteur avec un statut d’erreur nul. Si cela ne
fonctionne pas, vous pouvez fermer l’interpréteur en tapant la
commande "quit()".

The interpreter’s line-editing features usually aren’t very
sophisticated.  On Unix, whoever installed the interpreter may have
enabled support for the GNU readline library, which adds more
elaborate interactive editing and history features. Perhaps the
quickest check to see whether command line editing is supported is
typing "Control-P" to the first Python prompt you get.  If it beeps,
you have command line editing; see Appendix Édition interactive des
entrées et substitution d’historique for an introduction to the keys.
If nothing appears to happen, or if "^P" is echoed, command line
editing isn’t available; you’ll only be able to use backspace to
remove characters from the current line.

L’interpréteur opère de façon similaire au shell Unix : lorsqu’il est
appelé avec l’entrée standard connectée à un périphérique tty, il lit
et exécute les commandes de façon interactive; lorsqu’il est appelé
avec un nom de fichier en argument ou avec un fichier comme entrée
standard, il lit et exécute un *script* depuis ce fichier.

Une autre façon de lancer l’interpréteur est "python -c commande [arg]
...". Cela exécute les instructions de *commande* de façon analogue à
l’option "-c" du shell. Parce que les instructions Python contiennent
souvent des espaces et d’autres caractères spéciaux pour le shell, il
est généralement conseillé de mettre *commande* entre guillemets
simples.

Certains modules Python sont aussi utiles en tant que scripts. Ils
peuvent être appelé avec "python -m module [arg] ..." qui exécute le
fichier source de *module* comme si vous aviez tapé son nom complet
dans la ligne de commande.

Quand un fichier de script est utilisé, il est parfois utile de
pouvoir lancer le script puis d’entrer dans le mode interactif après
coup. Cela est possible en passant "-i" avant le script.

All command-line options are described in Ligne de commande et
environnement.


Passage d’arguments
-------------------

Lorsqu’ils sont connus de l’interpréteur, le nom du script et les
arguments additionnels sont représentés sous forme d’une liste
assignée à la variable "argv" du module "sys". Vous pouvez y accéder
en exécutant "import sys". La liste contient au minimum un élément;
quand aucun script ni aucun arguments ne sont donnés, "sys.argv[0]"
est une chaine vide. Quand "'-'" (qui représente l’entrée standard)
est passé comme nom de script, "sys.argv[0]" contient "'-'". Quand
"-c" *commande* est utilisé, "sys.argv[0]" contient "'-c'". Enfin,
quand "-m" *module* est utilisé, le nom complet du module est assigné
à "sys.argv[0]". Les options trouvées après "-c" *commande* ou "-m"
*module* ne sont pas lues comme options de l’interpréteur Python mais
laissées dans "sys.argv" pour être utilisée par le module ou la
commande.


Mode interactif
---------------

Lorsque des commandes sont lues depuis un tty, l’interpréteur est dit
être en *mode interactif*. Dans ce mode, il demande la commande
suivante avec le *prompt primaire*, en général trois signes plus-
grand-que (">>>") ; pour les lignes de continuation, il affiche le
*prompt secondaire*, par défaut trois points ("..."). L’interpréteur
affiche un message de bienvenue indiquant son numéro de version et une
notice de copyright avant d’afficher le premier prompt :

   python
   Python 2.7 (#1, Feb 28 2010, 00:02:06)
   Type "help", "copyright", "credits" or "license" for more information.
   >>>

Les lignes de continuation sont nécessaires pour entrer une
construction multi-lignes. Par exemple, regardez cette instruction
"if"

   >>> the_world_is_flat = 1
   >>> if the_world_is_flat:
   ...     print "Be careful not to fall off!"
   ...
   Be careful not to fall off!

Pour plus d’informations sur le mode interactif, voir Mode interactif.


L’interpréteur et son environnement
===================================


Encodage du code source
-----------------------

Par défaut Python considère que ses fichiers source sont encodés en
UTF-8. Dans cet encodage, les caractères de la plupart des langues
peuvent être utilisés ensemble dans les chaînes de caractères,
identifiants, et commentaires, bien que la bibliothèque standard
n’utilise que des caractères ASCII dans ses identifiants, une bonne
habitude que tout code portable devrait suivre. Pour afficher
correctement tous ces caractères, votre éditeur doit reconnaître que
le fichier est en UTF-8, et utiliser une fonte de caractère qui
comprend tous les caractères utilisés dans le fichier.

Pour annoncer un encodage différent de l’encodage par défaut, une
ligne de commentaire particulière doit être ajoutée à la *première*
ligne du fichier.  Sa syntaxe est la suivante :

   # -*- coding: encoding -*-

où *encoding* est un des "codecs" supporté par Python.

Par example, pour déclarer un encodage *Windows-1252*, la première
ligne de votre code source doit être :

   # -*- coding: cp-1252 -*-

Une exception à la règle *première ligne* est lorsque la première
ligne est un shebang UNIX.  Dans ce cas, la déclaration de l’encodage
doit être placé sur la seconde ligne du fichier.. Par exemple :

   #!/usr/bin/env python
   # -*- coding: cp-1252 -*-
