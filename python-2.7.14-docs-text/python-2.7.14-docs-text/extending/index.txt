Extending and Embedding the Python Interpreter
**********************************************

This document describes how to write modules in C or C++ to extend the
Python interpreter with new modules.  Those modules can not only
define new functions but also new object types and their methods.  The
document also describes how to embed the Python interpreter in another
application, for use as an extension language.  Finally, it shows how
to compile and link extension modules so that they can be loaded
dynamically (at run time) into the interpreter, if the underlying
operating system supports this feature.

This document assumes basic knowledge about Python.  For an informal
introduction to the language, see Le tutoriel Python.  The Python
Language Reference gives a more formal definition of the language.
The Python Standard Library documents the existing object types,
functions and modules (both built-in and written in Python) that give
the language its wide application range.

For a detailed description of the whole Python/C API, see the separate
Python/C API Reference Manual.

Note: This guide only covers the basic tools for creating extensions
  provided as part of this version of CPython. Third party tools may
  offer simpler alternatives. Refer to the binary extensions section
  in the Python Packaging User Guide for more information.

* Étendre Python en C ou C++

  * Un exemple simple

  * Intermezzo: Les Erreurs et Exceptions

  * Retour vers l’Exemple

  * The Module’s Method Table and Initialization Function

  * Compilation and Linkage

  * Calling Python Functions from C

  * Extracting Parameters in Extension Functions

  * Keyword Parameters for Extension Functions

  * Building Arbitrary Values

  * Reference Counts

  * Writing Extensions in C++

  * Providing a C API for an Extension Module

* Defining New Types

  * The Basics

  * Type Methods

* Construire les extensions C et C++ avec distutils

  * Distribuer vos modules d’extension

* Building C and C++ Extensions on Windows

  * A Cookbook Approach

  * Differences Between Unix and Windows

  * Using DLLs in Practice

* Intégrer Python dans une autre Application

  * Intégration de Très Haut Niveau

  * Au delà de l’Intégration de Haut Niveau: Survol

  * Intégration Pure

  * Étendre un Python Intégré

  * Intégrer Python dans du C++

  * Compiler et Lier en environnement Unix ou similaire
