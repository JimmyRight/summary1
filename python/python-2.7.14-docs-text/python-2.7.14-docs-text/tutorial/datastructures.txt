Structures de données
*********************

Ce chapitre reprend plus en détail quelques point déjà décrits
précédemment, et introduit également de nouvelles notions.


Compléments sur les listes
==========================

Le type liste dispose de méthodes supplémentaires. Voici la liste
complète des méthodes des objets de type liste :

list.append(x)

   Add an item to the end of the list; equivalent to "a[len(a):] =
   [x]".

list.extend(L)

   Extend the list by appending all the items in the given list;
   equivalent to "a[len(a):] = L".

list.insert(i, x)

   Insère un élément à la position indiquée. Le premier argument est
   la position de l’élément courant avant lequel l’insertion doit
   s’effectuer, donc "a.insert(0, x)" insère l’élément en tête de la
   liste, et "a.insert(len(a), x)" est équivalent à "a.append(x)".

list.remove(x)

   Remove the first item from the list whose value is *x*. It is an
   error if there is no such item.

list.pop([i])

   Enlève de la liste l’élément situé à la position indiquée, et le
   renvoie en valeur de retour. Si aucune position n’est indiqué,
   "a.pop()" enlève et renvoie le dernier élément de la liste (les
   crochets autour du *i* dans la signature de la méthode indiquent
   bien que ce paramètre est facultatif, et non que vous devez placer
   des crochets dans votre code ! Vous retrouverez cette notation
   fréquemment dans le Guide de Référence de la Bibliothèque Python).

list.index(x)

   Return the index in the list of the first item whose value is *x*.
   It is an error if there is no such item.

list.count(x)

   Renvoie le nombre d’éléments ayant la valeur *x* dans la liste.

list.sort(cmp=None, key=None, reverse=False)

   Trie les éléments sur place, (les arguments peuvent personaliser le
   tri, voir "sorted()" pour leur explication).

list.reverse()

   Reverse the elements of the list, in place.

L’exemple suivant utilise la plupart des méthodes des listes :

   >>> a = [66.25, 333, 333, 1, 1234.5]
   >>> print a.count(333), a.count(66.25), a.count('x')
   2 1 0
   >>> a.insert(2, -1)
   >>> a.append(333)
   >>> a
   [66.25, 333, -1, 333, 1, 1234.5, 333]
   >>> a.index(333)
   1
   >>> a.remove(333)
   >>> a
   [66.25, -1, 333, 1, 1234.5, 333]
   >>> a.reverse()
   >>> a
   [333, 1234.5, 1, 333, -1, 66.25]
   >>> a.sort()
   >>> a
   [-1, 1, 66.25, 333, 333, 1234.5]
   >>> a.pop()
   1234.5
   >>> a
   [-1, 1, 66.25, 333, 333]

You might have noticed that methods like "insert", "remove" or "sort"
that only modify the list have no return value printed – they return
the default "None".  This is a design principle for all mutable data
structures in Python.


Utiliser les listes comme des piles
-----------------------------------

Les méthodes des listes rendent très facile leur utilisation comme des
piles, où le dernier élément ajouté est le premier récupéré (« dernier
entré, premier sorti », ou LIFO pour « last-in, first-out »). Pour
ajouter un élément sur la pile, utilisez la méthode "append()". Pour
récupérer l’objet au sommet de la pile, utilisez la méthode "pop()",
sans indicateur de position. Par exemple :

   >>> stack = [3, 4, 5]
   >>> stack.append(6)
   >>> stack.append(7)
   >>> stack
   [3, 4, 5, 6, 7]
   >>> stack.pop()
   7
   >>> stack
   [3, 4, 5, 6]
   >>> stack.pop()
   6
   >>> stack.pop()
   5
   >>> stack
   [3, 4]


Utiliser les listes comme des files
-----------------------------------

Il est également possible d’utiliser une liste comme une file, où le
premier élément ajouté est le premier récupéré (« premier entré,
premier sorti », ou FIFO pour « first-in, first-out ») ; touefois, les
listes ne sont pas très efficaces pour ce type de traitement. Alors
que les ajouts et suppressions en fin de liste sont rapides, les
opérations d’insertions ou de retraits en début de liste sont lentes
(car tous les autres éléments doivent être décalés d’une position).

Pour implémenter une file, utilisez donc la classe "collections.deque"
qui a été conçue pour fournir des opérations d’ajouts et de retraits
rapides aux deux extrémités. Par exemple :

   >>> from collections import deque
   >>> queue = deque(["Eric", "John", "Michael"])
   >>> queue.append("Terry")           # Terry arrives
   >>> queue.append("Graham")          # Graham arrives
   >>> queue.popleft()                 # The first to arrive now leaves
   'Eric'
   >>> queue.popleft()                 # The second to arrive now leaves
   'John'
   >>> queue                           # Remaining queue in order of arrival
   deque(['Michael', 'Terry', 'Graham'])


Functional Programming Tools
----------------------------

There are three built-in functions that are very useful when used with
lists: "filter()", "map()", and "reduce()".

"filter(function, sequence)" returns a sequence consisting of those
items from the sequence for which "function(item)" is true. If
*sequence* is a "str", "unicode" or "tuple", the result will be of the
same type; otherwise, it is always a "list".  For example, to compute
a sequence of numbers divisible by 3 or 5:

   >>> def f(x): return x % 3 == 0 or x % 5 == 0
   ...
   >>> filter(f, range(2, 25))
   [3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24]

"map(function, sequence)" calls "function(item)" for each of the
sequence’s items and returns a list of the return values.  For
example, to compute some cubes:

   >>> def cube(x): return x*x*x
   ...
   >>> map(cube, range(1, 11))
   [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]

More than one sequence may be passed; the function must then have as
many arguments as there are sequences and is called with the
corresponding item from each sequence (or "None" if some sequence is
shorter than another).  For example:

   >>> seq = range(8)
   >>> def add(x, y): return x+y
   ...
   >>> map(add, seq, seq)
   [0, 2, 4, 6, 8, 10, 12, 14]

"reduce(function, sequence)" returns a single value constructed by
calling the binary function *function* on the first two items of the
sequence, then on the result and the next item, and so on.  For
example, to compute the sum of the numbers 1 through 10:

   >>> def add(x,y): return x+y
   ...
   >>> reduce(add, range(1, 11))
   55

If there’s only one item in the sequence, its value is returned; if
the sequence is empty, an exception is raised.

A third argument can be passed to indicate the starting value.  In
this case the starting value is returned for an empty sequence, and
the function is first applied to the starting value and the first
sequence item, then to the result and the next item, and so on.  For
example,

   >>> def sum(seq):
   ...     def add(x,y): return x+y
   ...     return reduce(add, seq, 0)
   ...
   >>> sum(range(1, 11))
   55
   >>> sum([])
   0

Don’t use this example’s definition of "sum()": since summing numbers
is such a common need, a built-in function "sum(sequence)" is already
provided, and works exactly like this.


Compréhensions de listes
------------------------

Les compréhensions de listes fournissent un moyen de construire des
listes de manière très concice. Une application classique est la
construction de nouvelles listes où chaque élément est le résultat
d’une opération appliquée à chaque élément d’une autre séquence, ou de
créer une sous-séquence des éléments satisfaisant une condition
spécifique.

Par exemple, supposons que l’on veuille créer une liste de carrés,
comme :

   >>> squares = []
   >>> for x in range(10):
   ...     squares.append(x**2)
   ...
   >>> squares
   [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

We can obtain the same result with:

   squares = [x**2 for x in range(10)]

This is also equivalent to "squares = map(lambda x: x**2, range(10))",
but it’s more concise and readable.

Une compréhension de liste consiste en crochets contenant une
expression suivie par une clause "for", puis par zéro ou plus clauses
"for" ou "if". Le résultat sera une nouvelle liste résultat de
l’évaluation de l’expression dans le contexte des clauses "for" et
"if" qui la suivent. Par exemple, cette compréhension de liste combine
les éléments de deux listes s’ils ne sont pas égaux :

   >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
   [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

and it’s equivalent to:

>>> combs = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
>>> combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

Notez que l’ordre des instructions "for" et "if" est le même dans ces
différents extraits de code.

Si l’expression est un tuple (c’est à dire "(x, y)" dans cet exemple),
elle doit être entourée par des parenthèses :

   >>> vec = [-4, -2, 0, 2, 4]
   >>> # create a new list with the values doubled
   >>> [x*2 for x in vec]
   [-8, -4, 0, 4, 8]
   >>> # filter the list to exclude negative numbers
   >>> [x for x in vec if x >= 0]
   [0, 2, 4]
   >>> # apply a function to all the elements
   >>> [abs(x) for x in vec]
   [4, 2, 0, 2, 4]
   >>> # call a method on each element
   >>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
   >>> [weapon.strip() for weapon in freshfruit]
   ['banana', 'loganberry', 'passion fruit']
   >>> # create a list of 2-tuples like (number, square)
   >>> [(x, x**2) for x in range(6)]
   [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
   >>> # the tuple must be parenthesized, otherwise an error is raised
   >>> [x, x**2 for x in range(6)]
     File "<stdin>", line 1, in <module>
       [x, x**2 for x in range(6)]
                  ^
   SyntaxError: invalid syntax
   >>> # flatten a list using a listcomp with two 'for'
   >>> vec = [[1,2,3], [4,5,6], [7,8,9]]
   >>> [num for elem in vec for num in elem]
   [1, 2, 3, 4, 5, 6, 7, 8, 9]

Les compréhensions de listes peuvent contenir des expressions
complexes et des fonctions imbriquées :

   >>> from math import pi
   >>> [str(round(pi, i)) for i in range(1, 6)]
   ['3.1', '3.14', '3.142', '3.1416', '3.14159']


Compréhensions de listes imbriquées
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

La première expression dans une compréhension de liste peut être
n’importe quelle expression, y compris une autre compréhension de
liste.

Voyez l’exemple suivant d’une matrice de 3x4, implémentée sous la
forme de 3 listes de 4 éléments :

   >>> matrix = [
   ...     [1, 2, 3, 4],
   ...     [5, 6, 7, 8],
   ...     [9, 10, 11, 12],
   ... ]

Cette compréhension de liste va transposer les lignes et les colonnes
:

   >>> [[row[i] for row in matrix] for i in range(4)]
   [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

Comme on l’a vu dans la section précédente, la compréhension de liste
imbriquée est évaluée dans le contexte de l’instruction "for" qui la
suit, donc cet exemple est équivalent à :

   >>> transposed = []
   >>> for i in range(4):
   ...     transposed.append([row[i] for row in matrix])
   ...
   >>> transposed
   [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

lequel à son tour est équivalent à :

   >>> transposed = []
   >>> for i in range(4):
   ...     # the following 3 lines implement the nested listcomp
   ...     transposed_row = []
   ...     for row in matrix:
   ...         transposed_row.append(row[i])
   ...     transposed.append(transposed_row)
   ...
   >>> transposed
   [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

Dans des cas concrets, il est toujours préférable d’utiliser des
fonctions natives plutôt que des instructions de contrôle de flux
complexes. La fonction "zip()" ferait dans ce cas un excellent travail
:

   >>> zip(*matrix)
   [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]

Voyez Séparation des listes d’arguments pour plus de détails sur cette
ligne.


L’instruction "del"
===================

Il existe un moyen de retirer un élément d’une liste à partir de sa
position au lieu de sa valeur : l’instruction "del". Elle diffère de
la méthode "pop()" qui, elle, renvoie une valeur. L’instruction "del"
peut également être utilisée pour supprimer des tranches d’une liste
ou la vider complètement (ce que nous avions fait auparavent en
affectant une liste vide à la tranche). Par exemple :

   >>> a = [-1, 1, 66.25, 333, 333, 1234.5]
   >>> del a[0]
   >>> a
   [1, 66.25, 333, 333, 1234.5]
   >>> del a[2:4]
   >>> a
   [1, 66.25, 1234.5]
   >>> del a[:]
   >>> a
   []

"del" peut aussi être utilisée pour supprimer des variables :

   >>> del a

À partir de là, référencer le nom "a" est une erreur (au moins jusqu’à
ce qu’une autre valeur lui soit affectée). Vous trouverez d’autres
utilisations de la fonction "del" plus tard.


Tuples et séquences
===================

Nous avons vu que les listes et les chaînes de caractères ont beaucoup
de propriétés en commun, comme l’indexation et les opérations sur des
tranches. Ce sont deux exemple de *séquences* (voir Sequence Types —
str, unicode, list, tuple, bytearray, buffer, xrange). Comme Python
est un langage en constante évolution, d’autres types de séquences y
seront peut-être ajoutés. Il existe également un autre type standard
de séquence : le *tuple*.

Un tuple consiste en différentes valeurs séparées par des virgules,
comme par exemple :

   >>> t = 12345, 54321, 'hello!'
   >>> t[0]
   12345
   >>> t
   (12345, 54321, 'hello!')
   >>> # Tuples may be nested:
   ... u = t, (1, 2, 3, 4, 5)
   >>> u
   ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
   >>> # Tuples are immutable:
   ... t[0] = 88888
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   TypeError: 'tuple' object does not support item assignment
   >>> # but they can contain mutable objects:
   ... v = ([1, 2, 3], [3, 2, 1])
   >>> v
   ([1, 2, 3], [3, 2, 1])

Comme vous pouvez le voir, à l’affichage les tuples sont toujours
encadrés par des parenthèses, de façon à ce que des tuples imbriqués
soient interprétés correctement ; ils peuvent être entrés avec ou sans
parenthèses, même si celles-ci sont souvent nécessaires (notamment
lorsqu’un tuple fait partie d’une expression plus longue). Il n’est
pas possible d’affecter de valeur à un élément d’un tuple ; par
contre, il est possible de créer des tuples contenant des objets
mutables, comme des listes.

Si les tuples peuvent sembler similaires aux listes, ils sont souvent
utilisés dans des cas différents et pour des raisons différentes. Les
tuples sont *immuable*s et contiennent souvent des séquences
hétérogènes d’éléments qui sont accédés par « déballage » (voir plus
loin) ou indexation (ou même par attributs dans le cas des
"namedtuples"). Les listes sont souvent *mutables*, et contiennent des
éléments homogènes qui sont accédés par itération sur la liste.

Un problème spécifique est la construction de tuples ne contenant
aucun ou un seul élément : la syntaxe a quelques tournures spécifiques
pour s’en accomoder. Les tuples vides sont construits par une paire de
parenthèses vides ; un tuple avec un seul élément est construit en
faisant suivre la valeur par une virgule (il n’est pas suffisant de
placer cette valeur entre parenthèses). Pas très joli, mais efficace.
Par exemple :

   >>> empty = ()
   >>> singleton = 'hello',    # <-- note trailing comma
   >>> len(empty)
   0
   >>> len(singleton)
   1
   >>> singleton
   ('hello',)

L’instruction "t = 12345, 54321, 'hello !'" est un exemple d’un
*emballage de tuple* : les valeurs "12345", "54321" et "hello !" sont
emballées ensemble dans un tuple. L’opération inverse est aussi
possible :

   >>> x, y, z = t

This is called, appropriately enough, *sequence unpacking* and works
for any sequence on the right-hand side.  Sequence unpacking requires
the list of variables on the left to have the same number of elements
as the length of the sequence.  Note that multiple assignment is
really just a combination of tuple packing and sequence unpacking.


Les ensembles
=============

Python fournit également un type de donnée pour les *ensembles*. Un
ensemble est une collection non ordonnée sans élément dupliqué. Des
utilisations basiques concernent par exemple des tests d’appartenance
ou des suppressons de doublons. Les ensembles supportent également les
opérations mathématiques comme les unions, intersections, différences
et différences symétriques.

Des accolades, ou la fonction "set()" peuvent être utilisés pour créer
des ensembles.    Notez que pour créer un ensemble vide, "{}" ne
fonctionne pas, cela créé un dictionnaire vide. Utilisez plutôt
"set()".

Voici une brève démonstration :

   >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
   >>> fruit = set(basket)               # create a set without duplicates
   >>> fruit
   set(['orange', 'pear', 'apple', 'banana'])
   >>> 'orange' in fruit                 # fast membership testing
   True
   >>> 'crabgrass' in fruit
   False

   >>> # Demonstrate set operations on unique letters from two words
   ...
   >>> a = set('abracadabra')
   >>> b = set('alacazam')
   >>> a                                  # unique letters in a
   set(['a', 'r', 'b', 'c', 'd'])
   >>> a - b                              # letters in a but not in b
   set(['r', 'd', 'b'])
   >>> a | b                              # letters in either a or b
   set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
   >>> a & b                              # letters in both a and b
   set(['a', 'c'])
   >>> a ^ b                              # letters in a or b but not both
   set(['r', 'd', 'b', 'm', 'z', 'l'])

Tout comme les comprehensions de listes, il est possibled’écrire des
comprehensions d’ensembles :

   >>> a = {x for x in 'abracadabra' if x not in 'abc'}
   >>> a
   set(['r', 'd'])


Dictionnaires
=============

Un autre type de donnée très utile, natif dans Python, est le
*dictionnaire* (voir Les types de correspondances — dict). Ces
dictionnaires sont parfois présents dans d’autres langages sous le nom
de « mémoires associatives » ou de « tableaux associatifs ». À la
différence des séquences, qui sont indexées par des nombres, les
dictionnaires sont indexés par des *clés*, qui peuvent être de
n’importe quel type immuable ; les chaînes de caractères et les
nombres peuvent toujours être des clés. Des tuples peuvent être
utilisés comme clés s’ils ne contiennent que des chaînes, des nombres
ou des tuples ; si un tuple contient un objet mutable, de façon
directe ou indirecte, il ne peut pas être utilisé comme une clé. Vous
ne pouvez pas utiliser des listes comme clés, car les listes peuvent
être modifiées en place en utilisant des affectations par position,
par tranches ou via des méthodes comme "append()" ou "extend()".

Le plus simple est de considérer les dictionnaires comme des ensembles
non ordonnés de paires *clé: valeur*, les clés devant être uniques (au
sein d’un dictionnaire). Une paire d’accolades crée un dictionnaire
vide : "{}". Placer une liste de paires clé:valeur séparées par des
virgules à l’intérieur des accolades ajoute les valeurs
correspondantes au dictionnaire ; c’est également de cette façon que
les dictionnaires sont affichés en sortie.

Les principales opérations effectuées sur un dictionnaire consistent à
stocker une valeur pour une clé et à extraire la valeur correspondant
à une clé. Il est également possible de supprimer une paire clé:valeur
avec "del". Si vous stockez une valeur pour une clé qui est déjà
utilisée, l’ancienne valeur associée à cette clé est perdue. Si vous
tentez d’extraire une valeur associée à une clé qui n’existe pas, une
exception est levée.

The "keys()" method of a dictionary object returns a list of all the
keys used in the dictionary, in arbitrary order (if you want it
sorted, just apply the "sorted()" function to it).  To check whether a
single key is in the dictionary, use the "in" keyword.

Voici un petit exemple utilisant un dictionnaire :

   >>> tel = {'jack': 4098, 'sape': 4139}
   >>> tel['guido'] = 4127
   >>> tel
   {'sape': 4139, 'guido': 4127, 'jack': 4098}
   >>> tel['jack']
   4098
   >>> del tel['sape']
   >>> tel['irv'] = 4127
   >>> tel
   {'guido': 4127, 'irv': 4127, 'jack': 4098}
   >>> tel.keys()
   ['guido', 'irv', 'jack']
   >>> 'guido' in tel
   True

Le constructeur "dict()" fabrique un dictionnaire directement à partir
d’une liste de paires clé-valeur stockées sous la forme de tuples :

   >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
   {'sape': 4139, 'jack': 4098, 'guido': 4127}

De plus, il est possible de créer des dictionnaires par compréhension
depuis un jeu de clef et valeurs :

   >>> {x: x**2 for x in (2, 4, 6)}
   {2: 4, 4: 16, 6: 36}

Lorsque les clés sont de simples chaînes de caractères, il est parfois
plus facile de spécifier les paires en utilisant des paramètres nommés
:

   >>> dict(sape=4139, guido=4127, jack=4098)
   {'sape': 4139, 'jack': 4098, 'guido': 4127}


Techniques de boucles
=====================

Lorsque vous itérez sur une séquence, la position et la valeur
correspondante peuvent être récupérées en même temps en utilisant la
fonction "enumerate()".

   >>> for i, v in enumerate(['tic', 'tac', 'toe']):
   ...     print i, v
   ...
   0 tic
   1 tac
   2 toe

Pour faire des boucles sur deux séquences ou plus en même temps, les
éléments peuvent être associés par la fonction "zip()"

   >>> questions = ['name', 'quest', 'favorite color']
   >>> answers = ['lancelot', 'the holy grail', 'blue']
   >>> for q, a in zip(questions, answers):
   ...     print 'What is your {0}?  It is {1}.'.format(q, a)
   ...
   What is your name?  It is lancelot.
   What is your quest?  It is the holy grail.
   What is your favorite color?  It is blue.

Pour faire une boucle sur une séquence inversée, commencez par créer
la séquence dans son ordre normal, puis appliquez la fonction
"reversed()"

   >>> for i in reversed(xrange(1,10,2)):
   ...     print i
   ...
   9
   7
   5
   3
   1

Pour faire une boucle sur une séquence triée, utilisez la fonction
"sorted()", qui renvoie une nouvelle liste triée sans altérer la
source :

   >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
   >>> for f in sorted(set(basket)):
   ...     print f
   ...
   apple
   banana
   orange
   pear

When looping through dictionaries, the key and corresponding value can
be retrieved at the same time using the "iteritems()" method.

   >>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
   >>> for k, v in knights.iteritems():
   ...     print k, v
   ...
   gallahad the pure
   robin the brave

Il est parfois tentant de changer une liste pendant son itération,
cependant, c’est souvent plus simple et plus sûr de créer une nouvelle
liste à la place.

   >>> import math
   >>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
   >>> filtered_data = []
   >>> for value in raw_data:
   ...     if not math.isnan(value):
   ...         filtered_data.append(value)
   ...
   >>> filtered_data
   [56.2, 51.7, 55.3, 52.5, 47.8]


Plus d’informations sur les conditions
======================================

Les conditions utilisées dans une instruction "while" ou "if" peuvent
contenir n’importe quel opérateur, pas seulement des comparaisons.

Les opérateurs de comparaison "in" et "not in" testent si une valeur
est présente ou non dans une séquence. Les opérateurs "is" et "is not"
testent si deux objets sont vraiment le même objet ; ceci n’est
important que pour des objets mutables comme des listes. Tous les
opérateurs de comparaison ont la même priorité, qui est plus faible
que celle des opérateurs numériques.

Les comparaison peuvent être enchaînées. Par exemple, "a < b == c"
teste si "a" est inférieur ou égal à "b" et par ailleurs si "b" est
égal à "c".

Les comparaisons peuvent être combinées en utilisant les opérateurs
booléens "and" et "or", le résultat d’une comparaison (ou de toute
expression booléenne) pouvant être inversé avec "not". Ces opérateurs
ont une priorité inférieure à celle des opérateurs de comparaison ;
entre eux, "not" a la priorité la plus élevée et "or" la plus faible,
de telle sorte que "A and not B or C" est équivalent à "(A and (not
B)) or C". Comme toujours, des parenthèses peuvent être utilisées pour
exprimer l’instruction désirée.

Les opérateurs booléens "and" et "or" sont appelés opérateurs *en
circuit court* : leurs arguments sont évalués de la gauche vers la
droite, et l’évaluation s’arrête dès que le résultat est déterminé.
Par exemple, si "A" et "C" sont vrais et "B" est faux, "A and B and C"
n’évalue pas l’expression "C". Lorsqu’elle est utilisée en tant que
valeur et non en tant que booléen, la valeur de retour d’un opérateur
en circuit court est celle du dernier argument évalué.

Il est possible d’affecter le résultat d’une comparaison ou d’une
autre expression booléenne à une variable. Par exemple :

   >>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
   >>> non_null = string1 or string2 or string3
   >>> non_null
   'Trondheim'

Notez qu’en Python, à la différence du C, des affectations ne peuvent
pas intervenir à l’intérieur d’expressions. Les programmeurs C
râleront peut-être après cela, mais cela évite des erreurs fréquentes
que l’on rencontre en C, lorsque l’expression "=" est placée alors
qu’une expression "==" était attendue.


Comparer des séquences avec d’autres types
==========================================

Sequence objects may be compared to other objects with the same
sequence type. The comparison uses *lexicographical* ordering: first
the first two items are compared, and if they differ this determines
the outcome of the comparison; if they are equal, the next two items
are compared, and so on, until either sequence is exhausted. If two
items to be compared are themselves sequences of the same type, the
lexicographical comparison is carried out recursively.  If all items
of two sequences compare equal, the sequences are considered equal. If
one sequence is an initial sub-sequence of the other, the shorter
sequence is the smaller (lesser) one.  Lexicographical ordering for
strings uses the ASCII ordering for individual characters.  Some
examples of comparisons between sequences of the same type:

   (1, 2, 3)              < (1, 2, 4)
   [1, 2, 3]              < [1, 2, 4]
   'ABC' < 'C' < 'Pascal' < 'Python'
   (1, 2, 3, 4)           < (1, 2, 4)
   (1, 2)                 < (1, 2, -1)
   (1, 2, 3)             == (1.0, 2.0, 3.0)
   (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)

Note that comparing objects of different types is legal.  The outcome
is deterministic but arbitrary: the types are ordered by their name.
Thus, a list is always smaller than a string, a string is always
smaller than a tuple, etc. [1] Mixed numeric types are compared
according to their numeric value, so 0 equals 0.0, etc.

-[ Notes ]-

[1] The rules for comparing objects of different types should not
    be relied upon; they may change in a future version of the
    language.
