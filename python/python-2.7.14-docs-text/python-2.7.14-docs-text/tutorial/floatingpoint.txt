Arithmétique en Nombre à Virgule Flottante : Problèmes et Limites
*****************************************************************

Les nombres à virgule flottante sont représentés, au niveau matériel,
en fractions de nombres binaires (base 2). Par exemple, la fraction
décimale :

   0.125

a la valeur 1/10 + 2/100 + 5/1000, et de la même manière, la fraction
binaire :

   0.001

a la valeur 0/2 + 0/4 + 1/8. Ces deux fractions ont une valeur
identique, la seule différence est que la première est une fraction
décimale, la seconde binaire.

Malheureusement, la plupart des fractions décimales n’ont pas de
représentation exacte en fractions binaires. Par conséquent, en
général, les nombres à virgule flottante que vous donnez sont
seulement approximés en fraction binaire pour être stocké dans la
machine.

Le problème est plus simple à aborder en base 10. Prenons par exemple,
la fraction 1/3. Vous pouvez l’approximer en une fraction décimale:

   0.3

ou, mieux,

   0.33

ou, mieux,

   0.333

etc… Peu importe le nombre de décimales que vous écrirez, le résultat
ne sera jamais exactement 1/3, mais une estimation s’en approchant
toujours mieux.

De la même manière, peu importe combien de décimales en base 2 vous
utiliserez, la valeur décimale 0.1 ne peut être représentée exactement
en fraction binaire. En base 2, 1/10 est le nombre périodique suivant
:

   0.0001100110011001100110011001100110011001100110011...

Stop at any finite number of bits, and you get an approximation.

On a typical machine running Python, there are 53 bits of precision
available for a Python float, so the value stored internally when you
enter the decimal number "0.1" is the binary fraction

   0.00011001100110011001100110011001100110011001100110011010

which is close to, but not exactly equal to, 1/10.

It’s easy to forget that the stored value is an approximation to the
original decimal fraction, because of the way that floats are
displayed at the interpreter prompt.  Python only prints a decimal
approximation to the true decimal value of the binary approximation
stored by the machine.  If Python were to print the true decimal value
of the binary approximation stored for 0.1, it would have to display

   >>> 0.1
   0.1000000000000000055511151231257827021181583404541015625

C’est bien plus de décimales que nécessaire, donc Python affiche une
valeur arrondie afin d’améliorer la lisibilité :

   >>> 0.1
   0.1

It’s important to realize that this is, in a real sense, an illusion:
the value in the machine is not exactly 1/10, you’re simply rounding
the *display* of the true machine value.  This fact becomes apparent
as soon as you try to do arithmetic with these values

   >>> 0.1 + 0.2
   0.30000000000000004

Ce comportement est inhérent au comportement des nombres à virgule
flottante : ce n’est pas un bug dans Python, et ce n’est pas non plus
un bug dans votre code. Vous verrez le même type de comportement dans
tous les autres langages utilisant le support matériel pour le calcul
des nombres à virgules flottante (bien que certains langages ne
rendent pas visible la différence par défaut, ou pas dans tous les
modes d’affichage).

Other surprises follow from this one.  For example, if you try to
round the value 2.675 to two decimal places, you get this

   >>> round(2.675, 2)
   2.67

The documentation for the built-in "round()" function says that it
rounds to the nearest value, rounding ties away from zero.  Since the
decimal fraction 2.675 is exactly halfway between 2.67 and 2.68, you
might expect the result here to be (a binary approximation to) 2.68.
It’s not, because when the decimal string "2.675" is converted to a
binary floating-point number, it’s again replaced with a binary
approximation, whose exact value is

   2.67499999999999982236431605997495353221893310546875

Since this approximation is slightly closer to 2.67 than to 2.68, it’s
rounded down.

If you’re in a situation where you care which way your decimal
halfway-cases are rounded, you should consider using the "decimal"
module. Incidentally, the "decimal" module also provides a nice way to
« see » the exact value that’s stored in any particular Python float

   >>> from decimal import Decimal
   >>> Decimal(2.675)
   Decimal('2.67499999999999982236431605997495353221893310546875')

Another consequence is that since 0.1 is not exactly 1/10, summing ten
values of 0.1 may not yield exactly 1.0, either:

   >>> sum = 0.0
   >>> for i in range(10):
   ...     sum += 0.1
   ...
   >>> sum
   0.9999999999999999

L’arithmétique des nombres binaires à virgule flottante réserve
beaucoup de surprises de ce genre. Le problème avec « 0.1 » est
expliqué en détails ci-desous, dans la section « Représentation
d’Erreur ». Voir The Perils of Floating Point pour une liste plus
complète de ce genre de surprises.

As that says near the end, « there are no easy answers. »  Still,
don’t be unduly wary of floating-point!  The errors in Python float
operations are inherited from the floating-point hardware, and on most
machines are on the order of no more than 1 part in 2**53 per
operation.  That’s more than adequate for most tasks, but you do need
to keep in mind that it’s not decimal arithmetic, and that every float
operation can suffer a new rounding error.

While pathological cases do exist, for most casual use of floating-
point arithmetic you’ll see the result you expect in the end if you
simply round the display of your final results to the number of
decimal digits you expect.  For fine control over how a float is
displayed see the "str.format()" method’s format specifiers in Syntaxe
de formatage de chaîne.


Erreurs de représentation
=========================

Cette section explique en détail l’exemple du « 0.1 », et montre
comment vous pouvez effectuer une analyse exacte de ce type de cas par
vous-même. Il est supposé que vous êtes déjà familier de la
représentation binaire des nombres flottants.

*Representation error* refers to the fact that some (most, actually)
decimal fractions cannot be represented exactly as binary (base 2)
fractions. This is the chief reason why Python (or Perl, C, C++, Java,
Fortran, and many others) often won’t display the exact decimal number
you expect:

   >>> 0.1 + 0.2
   0.30000000000000004

Why is that?  1/10 and 2/10 are not exactly representable as a binary
fraction. Almost all machines today (July 2010) use IEEE-754 floating
point arithmetic, and almost all platforms map Python floats to
IEEE-754 « double precision ».  754 doubles contain 53 bits of
precision, so on input the computer strives to convert 0.1 to the
closest fraction it can of the form *J*/2***N* where *J* is an integer
containing exactly 53 bits.  Rewriting

   1 / 10 ~= J / (2**N)

en :

   J ~= 2**N / 10

en se rappelant que *J* fait exactement 53 bits (donc ">= 2**52" mais
"< 2**53"), la meilleur valeur possible pour *N* est 56:

   >>> 2**52
   4503599627370496
   >>> 2**53
   9007199254740992
   >>> 2**56/10
   7205759403792793

That is, 56 is the only value for *N* that leaves *J* with exactly 53
bits. The best possible value for *J* is then that quotient rounded:

   >>> q, r = divmod(2**56, 10)
   >>> r
   6

Puisque la retenue est plus grande que la moitié de 10, la meilleure
approximation est obtenue en arrondissant par le haut:

   >>> q+1
   7205759403792794

Therefore the best possible approximation to 1/10 in 754 double
precision is that over 2**56, or

   7205759403792794 / 72057594037927936

Notez que puisque l’arrondi a été fait vers le haut, le résultat est
en réalité légèrement plus grand que 1/10; si nous n’avions pas
arrondi par le haut, le quotient aurait été légèrement plus petit que
1/10. Mais dans aucun cas il ne vaut *exactement* 1/10 !

Donc l’ordinateur ne « voit » jamais 1/10: ce qu’il voit est la
fraction exacte donnée ci-dessus, la meilleure approximation utilisant
les nombres à virgule flottante double précision de l“« IEEE-754 »

   >>> .1 * 2**56
   7205759403792794.0

If we multiply that fraction by 10**30, we can see the (truncated)
value of its 30 most significant decimal digits:

   >>> 7205759403792794 * 10**30 // 2**56
   100000000000000005551115123125L

meaning that the exact number stored in the computer is approximately
equal to the decimal value 0.100000000000000005551115123125.  In
versions prior to Python 2.7 and Python 3.1, Python rounded this value
to 17 significant digits, giving “0.10000000000000001”.  In current
versions, Python displays a value based on the shortest decimal
fraction that rounds correctly back to the true binary value,
resulting simply in “0.1”.
