Objets Cellules
***************

Les objets « Cellules » sont utilisés pour implémenter des variables
référencées dans de multiples enviromments. Pour chacune de ces
variables, un objet cellule est créé pour stocker sa valeur ; les
variables locales de chaque pile d’exécution qui référence cette
valeur contiennent une référence sur les cellules des autres
environnements qui utilisent aussi cette variable. Quand la valeur est
accédée, la valeur de la cellule est utilisée, au lei de celle de
l’objet cellule proprement dit. Ce dé-référencement de l’objet cellule
requiert l’intervention du bytecode généré ; il n’est pas
automatiquement dé-référencé quand il est accédé. Il est plausible que
les objets cellules ne soit utilisés ailleurs.

PyCellObject

   The C structure used for cell objects.

PyTypeObject PyCell_Type

   The type object corresponding to cell objects.

int PyCell_Check(ob)

   Return true if *ob* is a cell object; *ob* must not be *NULL*.

PyObject* PyCell_New(PyObject *ob)
    *Return value: New reference.*

   Create and return a new cell object containing the value *ob*. The
   parameter may be *NULL*.

PyObject* PyCell_Get(PyObject *cell)
    *Return value: New reference.*

   Return the contents of the cell *cell*.

PyObject* PyCell_GET(PyObject *cell)
    *Return value: Borrowed reference.*

   Return the contents of the cell *cell*, but without checking that
   *cell* is non-*NULL* and a cell object.

int PyCell_Set(PyObject *cell, PyObject *value)

   Set the contents of the cell object *cell* to *value*.  This
   releases the reference to any current content of the cell. *value*
   may be *NULL*.  *cell* must be non-*NULL*; if it is not a cell
   object, "-1" will be returned.  On success, "0" will be returned.

void PyCell_SET(PyObject *cell, PyObject *value)

   Sets the value of the cell object *cell* to *value*.  No reference
   counts are adjusted, and no checks are made for safety; *cell* must
   be non-*NULL* and must be a cell object.
