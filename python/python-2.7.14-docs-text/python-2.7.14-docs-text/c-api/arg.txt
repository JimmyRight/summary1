Analyse des arguments et construction des valeurs
*************************************************

Ces fonctions sont utiles pour créer vos propres fonctions et méthodes
d’extensions. Des informations supplémentaires et des exemples sont
disponibles ici: Extending and Embedding the Python Interpreter.

Dans Les trois premières de ces fonctions décrites,
"PyArg_ParseTuple()", "PyArg_ParseTupleAndKeywords()", et
"PyArg_Parse()", toutes utilisent *des chaînes de format* qui sont
utilisées pour indiquer à la fonction les arguments attendus. Les
chaînes de format utilise la même syntaxe pour chacune de ces
fonctions.

Une chaîne de format se compose de zéro ou plusieurs « unités de
format ». Une unité de format décrit un objet Python, elle est
généralement composée d’un seul caractère ou d’une séquence d’unités
de format entre parenthèses. À quelques exceptions près, une unité de
format qui n’est pas une séquence entre parenthèses correspond
normalement à un argument d’une seule adresse pour ces fonctions. Dans
la description qui suit, la forme entre guillemets est l’unité de
format, l’entrée entre parenthèses est le type d’objet Python qui
correspond à l’unité de format, et l’entrée entre crochets est le type
de la variable C (ou des variables) dont l’adresse doit être donnée.

These formats allow accessing an object as a contiguous chunk of
memory. You don’t have to provide raw storage for the returned unicode
or bytes area.  Also, you won’t have to release any memory yourself,
except with the "es", "es#", "et" and "et#" formats.

"s" (string or Unicode) [const char *]
   Convert a Python string or Unicode object to a C pointer to a
   character string.  You must not provide storage for the string
   itself; a pointer to an existing string is stored into the
   character pointer variable whose address you pass.  The C string is
   NUL-terminated.  The Python string must not contain embedded NUL
   bytes; if it does, a "TypeError" exception is raised. Unicode
   objects are converted to C strings using the default encoding.  If
   this conversion fails, a "UnicodeError" is raised.

"s#" (string, Unicode or any read buffer compatible object) [const
char *, int (or "Py_ssize_t", see below)]
   This variant on "s" stores into two C variables, the first one a
   pointer to a character string, the second one its length.  In this
   case the Python string may contain embedded null bytes.  Unicode
   objects pass back a pointer to the default encoded string version
   of the object if such a conversion is possible.  All other read-
   buffer compatible objects pass back a reference to the raw internal
   data representation.

   Starting with Python 2.5 the type of the length argument can be
   controlled by defining the macro "PY_SSIZE_T_CLEAN" before
   including "Python.h".  If the macro is defined, length is a
   "Py_ssize_t" rather than an int.

"s*" (string, Unicode, or any buffer compatible object) [Py_buffer]
   Similar to "s#", this code fills a Py_buffer structure provided by
   the caller.  The buffer gets locked, so that the caller can
   subsequently use the buffer even inside a "Py_BEGIN_ALLOW_THREADS"
   block; the caller is responsible for calling "PyBuffer_Release"
   with the structure after it has processed the data.

   Nouveau dans la version 2.6.

"z" (string, Unicode  or "None") [const char *]
   Comme "s", mais l’objet Python peut aussi être "None", auquel cas
   le pointeur C devient *NULL*.

"z#" (string, Unicode, "None" or any read buffer compatible object)
[const char *, int]
   This is to "s#" as "z" is to "s".

"z*" (string, Unicode, "None" or any buffer compatible object)
[Py_buffer]
   This is to "s*" as "z" is to "s".

   Nouveau dans la version 2.6.

"u" (Unicode) [Py_UNICODE *]
   Convert a Python Unicode object to a C pointer to a NUL-terminated
   buffer of 16-bit Unicode (UTF-16) data.  As with "s", there is no
   need to provide storage for the Unicode data buffer; a pointer to
   the existing Unicode data is stored into the "Py_UNICODE" pointer
   variable whose address you pass.

"u#" (Unicode) [Py_UNICODE *, int]
   This variant on "u" stores into two C variables, the first one a
   pointer to a Unicode data buffer, the second one its length. Non-
   Unicode objects are handled by interpreting their read-buffer
   pointer as pointer to a "Py_UNICODE" array.

"es" (string, Unicode or character buffer compatible object) [const
char *encoding, char **buffer]
   This variant on "s" is used for encoding Unicode and objects
   convertible to Unicode into a character buffer. It only works for
   encoded data without embedded NUL bytes.

   This format requires two arguments.  The first is only used as
   input, and must be a "const char*" which points to the name of an
   encoding as a NUL-terminated string, or *NULL*, in which case the
   default encoding is used.  An exception is raised if the named
   encoding is not known to Python. The second argument must be a
   "char**"; the value of the pointer it references will be set to a
   buffer with the contents of the argument text.  The text will be
   encoded in the encoding specified by the first argument.

   "PyArg_ParseTuple()" will allocate a buffer of the needed size,
   copy the encoded data into this buffer and adjust **buffer* to
   reference the newly allocated storage.  The caller is responsible
   for calling "PyMem_Free()" to free the allocated buffer after use.

"et" (string, Unicode or character buffer compatible object) [const
char *encoding, char **buffer]
   Same as "es" except that 8-bit string objects are passed through
   without recoding them.  Instead, the implementation assumes that
   the string object uses the encoding passed in as parameter.

"es#" (string, Unicode or character buffer compatible object) [const
char *encoding, char **buffer, int *buffer_length]
   This variant on "s#" is used for encoding Unicode and objects
   convertible to Unicode into a character buffer.  Unlike the "es"
   format, this variant allows input data which contains NUL
   characters.

   It requires three arguments.  The first is only used as input, and
   must be a "const char*" which points to the name of an encoding as
   a NUL-terminated string, or *NULL*, in which case the default
   encoding is used.  An exception is raised if the named encoding is
   not known to Python. The second argument must be a "char**"; the
   value of the pointer it references will be set to a buffer with the
   contents of the argument text.  The text will be encoded in the
   encoding specified by the first argument.  The third argument must
   be a pointer to an integer; the referenced integer will be set to
   the number of bytes in the output buffer.

   Il existe deux modes de fonctionnement :

   If **buffer* points a *NULL* pointer, the function will allocate a
   buffer of the needed size, copy the encoded data into this buffer
   and set **buffer* to reference the newly allocated storage.  The
   caller is responsible for calling "PyMem_Free()" to free the
   allocated buffer after usage.

   If **buffer* points to a non-*NULL* pointer (an already allocated
   buffer), "PyArg_ParseTuple()" will use this location as the buffer
   and interpret the initial value of **buffer_length* as the buffer
   size.  It will then copy the encoded data into the buffer and NUL-
   terminate it.  If the buffer is not large enough, a "TypeError"
   will be set. Note: starting from Python 3.6 a "ValueError" will be
   set.

   Dans les deux cas, **buffer_length* est la longueur des données
   encodées, sans l’octet NUL de fin.

"et#" (string, Unicode or character buffer compatible object) [const
char *encoding, char **buffer, int *buffer_length]
   Same as "es#" except that string objects are passed through without
   recoding them. Instead, the implementation assumes that the string
   object uses the encoding passed in as parameter.

"b" (integer) [unsigned char]
   Convertit un entier Python positif ou nul en un unsigned tiny int,
   stocké dans un "unsigned char" C.

"B" (integer) [unsigned char]
   Convertit un entier Python en un tiny int sans vérifier le
   débordement, stocké dans un "unsigned char" C.

   Nouveau dans la version 2.3.

"h" (integer) [short int]
   Convertit un entier Python en un "short int" C.

"H" (integer) [unsigned short int]
   Convertit un entier Python en un "unsigned short int" C, sans
   contrôle de débordement.

   Nouveau dans la version 2.3.

"i" (integer) [int]
   Convertit un entier Python en un "int" C.

"I" (integer) [unsigned int]
   Convertit un entier Python en un "unsigned int" C, sans contrôle de
   le débordement.

   Nouveau dans la version 2.3.

"l" (integer) [long int]
   Convertit un entier Python en un "long int".

"k" (integer) [unsigned long]
   Convert a Python integer or long integer to a C "unsigned long"
   without overflow checking.

   Nouveau dans la version 2.3.

"L" (integer) [PY_LONG_LONG]
   Convert a Python integer to a C "long long".  This format is only
   available on platforms that support "long long" (or "_int64" on
   Windows).

"K" (integer) [unsigned PY_LONG_LONG]
   Convert a Python integer or long integer to a C "unsigned long
   long" without overflow checking.  This format is only available on
   platforms that support "unsigned long long" (or "unsigned _int64"
   on Windows).

   Nouveau dans la version 2.3.

"n" (integer) [Py_ssize_t]
   Convert a Python integer or long integer to a C "Py_ssize_t".

   Nouveau dans la version 2.5.

"c" (string of length 1) [char]
   Convert a Python character, represented as a string of length 1, to
   a C "char".

"f" (float) [float]
   Convertit un nombre flottant Python vers un "float".

"d" (float) [double]
   Convertit un nombre flottant Python vers un "double" C.

"D" (complex) [Py_complex]
   Convertit un nombre complexe Python vers une structure "Py_complex"
   C.

"O" (object) [PyObject *]
   Stocke un objet Python (sans aucune conversion) en un pointeur sur
   un objet C. Ainsi, Le programme C reçoit l’objet réel qui a été
   passé. Le compteur de référence sur l’objet n’est pas incrémenté.
   Le pointeur stocké n’est pas *NULL*.

"O!" (object) [*typeobject*, PyObject *]
   Store a Python object in a C object pointer.  This is similar to
   "O", but takes two C arguments: the first is the address of a
   Python type object, the second is the address of the C variable (of
   type "PyObject*") into which the object pointer is stored.  If the
   Python object does not have the required type, "TypeError" is
   raised.

"O&" (object) [*converter*, *anything*]
   Convert a Python object to a C variable through a *converter*
   function. This takes two arguments: the first is a function, the
   second is the address of a C variable (of arbitrary type),
   converted to "void *". The *converter* function in turn is called
   as follows:

      status = converter(object, address);

   where *object* is the Python object to be converted and *address*
   is the "void*" argument that was passed to the "PyArg_Parse*()"
   function.  The returned *status* should be "1" for a successful
   conversion and "0" if the conversion has failed.  When the
   conversion fails, the *converter* function should raise an
   exception and leave the content of *address* unmodified.

"S" (string) [PyStringObject *]
   Like "O" but requires that the Python object is a string object.
   Raises "TypeError" if the object is not a string object.  The C
   variable may also be declared as "PyObject*".

"U" (Unicode string) [PyUnicodeObject *]
   Like "O" but requires that the Python object is a Unicode object.
   Raises "TypeError" if the object is not a Unicode object.  The C
   variable may also be declared as "PyObject*".

"t#" (read-only character buffer) [char *, int]
   Like "s#", but accepts any object which implements the read-only
   buffer interface.  The "char*" variable is set to point to the
   first byte of the buffer, and the "int" is set to the length of the
   buffer. Only single-segment buffer objects are accepted;
   "TypeError" is raised for all others.

"w" (read-write character buffer) [char *]
   Similar to "s", but accepts any object which implements the read-
   write buffer interface.  The caller must determine the length of
   the buffer by other means, or use "w#" instead.  Only single-
   segment buffer objects are accepted; "TypeError" is raised for all
   others.

"w#" (read-write character buffer) [char *, Py_ssize_t]
   Like "s#", but accepts any object which implements the read-write
   buffer interface.  The "char *" variable is set to point to the
   first byte of the buffer, and the "Py_ssize_t" is set to the length
   of the buffer.  Only single-segment buffer objects are accepted;
   "TypeError" is raised for all others.

"w*" (read-write byte-oriented buffer) [Py_buffer]
   This is to "w" what "s*" is to "s".

   Nouveau dans la version 2.6.

"(items)" (tuple) [*matching-items*]
   L’objet doit être une séquence Python dont la longueur est le
   nombre d’unités de formats dans *articles*. Les arguments C doivent
   correspondre à chaque unité de format particulière dans *articles*.
   Les unités de formats pour les séquences peuvent être imbriquées.

   Note: Prior to Python version 1.5.2, this format specifier only
     accepted a tuple containing the individual parameters, not an
     arbitrary sequence. Code which previously caused "TypeError" to
     be raised here may now proceed without an exception.  This is not
     expected to be a problem for existing code.

It is possible to pass Python long integers where integers are
requested; however no proper range checking is done — the most
significant bits are silently truncated when the receiving field is
too small to receive the value (actually, the semantics are inherited
from downcasts in C — your mileage may vary).

Quelques autres caractères ont un sens dans une chaîne de format. On
ne doit pas les trouvées dans des parenthèses imbriquées. Ce sont :

"|"
   Indicates that the remaining arguments in the Python argument list
   are optional.  The C variables corresponding to optional arguments
   should be initialized to their default value — when an optional
   argument is not specified, "PyArg_ParseTuple()" does not touch the
   contents of the corresponding C variable(s).

":"
   The list of format units ends here; the string after the colon is
   used as the function name in error messages (the « associated value
   » of the exception that "PyArg_ParseTuple()" raises).

";"
   La liste des unités de format s’arrête ici ; la chaîne après le
   point-virgule est utilise comme message d’erreur *au lieu* du
   message d’erreur par défaut. ":" et ";" sont mutuellement
   exclusifs.

Notez que n’importe quelles références sur un objet Python qui sont
données à l’appelant sont des références *empruntées* ; ne décrémentez
pas leur compteur de références !

Les arguments additionnels qui sont donnés à ces fonctions doivent
être des adresses de variables dont le type est déterminé par la
chaîine de format. Elles sont utilisées pour stocker les valeurs du
n-uplet d’entrée. Il y a quelques cas, comme décrit précédemment dans
le liste des unités de formats, où ces paramètres sont utilisés comme
valeurs d’entrée. Dans ce cas, ils devraient correspondre à ce qui est
spécifié pour l’unité de format correspondante.

For the conversion to succeed, the *arg* object must match the format
and the format must be exhausted.  On success, the "PyArg_Parse*()"
functions return true, otherwise they return false and raise an
appropriate exception. When the "PyArg_Parse*()" functions fail due to
conversion failure in one of the format units, the variables at the
addresses corresponding to that and the following format units are
left untouched.

int PyArg_ParseTuple(PyObject *args, const char *format, …)

   Parse the parameters of a function that takes only positional
   parameters into local variables.  Returns true on success; on
   failure, it returns false and raises the appropriate exception.

int PyArg_VaParse(PyObject *args, const char *format, va_list vargs)

   Identical to "PyArg_ParseTuple()", except that it accepts a va_list
   rather than a variable number of arguments.

int PyArg_ParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], …)

   Parse the parameters of a function that takes both positional and
   keyword parameters into local variables.  Returns true on success;
   on failure, it returns false and raises the appropriate exception.

int PyArg_VaParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], va_list vargs)

   Identical to "PyArg_ParseTupleAndKeywords()", except that it
   accepts a va_list rather than a variable number of arguments.

int PyArg_Parse(PyObject *args, const char *format, …)

   Function used to deconstruct the argument lists of « old-style »
   functions — these are functions which use the "METH_OLDARGS"
   parameter parsing method.  This is not recommended for use in
   parameter parsing in new code, and most code in the standard
   interpreter has been modified to no longer use this for that
   purpose.  It does remain a convenient way to decompose other
   tuples, however, and may continue to be used for that purpose.

int PyArg_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, …)

   A simpler form of parameter retrieval which does not use a format
   string to specify the types of the arguments.  Functions which use
   this method to retrieve their parameters should be declared as
   "METH_VARARGS" in function or method tables.  The tuple containing
   the actual parameters should be passed as *args*; it must actually
   be a tuple.  The length of the tuple must be at least *min* and no
   more than *max*; *min* and *max* may be equal.  Additional
   arguments must be passed to the function, each of which should be a
   pointer to a "PyObject*" variable; these will be filled in with the
   values from *args*; they will contain borrowed references.  The
   variables which correspond to optional parameters not given by
   *args* will not be filled in; these should be initialized by the
   caller. This function returns true on success and false if *args*
   is not a tuple or contains the wrong number of elements; an
   exception will be set if there was a failure.

   This is an example of the use of this function, taken from the
   sources for the "_weakref" helper module for weak references:

      static PyObject *
      weakref_ref(PyObject *self, PyObject *args)
      {
          PyObject *object;
          PyObject *callback = NULL;
          PyObject *result = NULL;

          if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
              result = PyWeakref_NewRef(object, callback);
          }
          return result;
      }

   The call to "PyArg_UnpackTuple()" in this example is entirely
   equivalent to this call to "PyArg_ParseTuple()":

      PyArg_ParseTuple(args, "O|O:ref", &object, &callback)

   Nouveau dans la version 2.2.

   Modifié dans la version 2.5: This function used an "int" type for
   *min* and *max*. This might require changes in your code for
   properly supporting 64-bit systems.

PyObject* Py_BuildValue(const char *format, …)
    *Return value: New reference.*

   Create a new value based on a format string similar to those
   accepted by the "PyArg_Parse*()" family of functions and a sequence
   of values. Returns the value or *NULL* in the case of an error; an
   exception will be raised if *NULL* is returned.

   "Py_BuildValue()" does not always build a tuple.  It builds a tuple
   only if its format string contains two or more format units.  If
   the format string is empty, it returns "None"; if it contains
   exactly one format unit, it returns whatever object is described by
   that format unit.  To force it to return a tuple of size "0" or
   one, parenthesize the format string.

   When memory buffers are passed as parameters to supply data to
   build objects, as for the "s" and "s#" formats, the required data
   is copied. Buffers provided by the caller are never referenced by
   the objects created by "Py_BuildValue()".  In other words, if your
   code invokes "malloc()" and passes the allocated memory to
   "Py_BuildValue()", your code is responsible for calling "free()"
   for that memory once "Py_BuildValue()" returns.

   In the following description, the quoted form is the format unit;
   the entry in (round) parentheses is the Python object type that the
   format unit will return; and the entry in [square] brackets is the
   type of the C value(s) to be passed.

   The characters space, tab, colon and comma are ignored in format
   strings (but not within format units such as "s#").  This can be
   used to make long format strings a tad more readable.

   "s" (string) [char *]
      Convert a null-terminated C string to a Python object.  If the C
      string pointer is *NULL*, "None" is used.

   "s#" (string) [char *, int]
      Convert a C string and its length to a Python object.  If the C
      string pointer is *NULL*, the length is ignored and "None" is
      returned.

   "z" (string or "None") [char *]
      Same as "s".

   "z#" (string or "None") [char *, int]
      Same as "s#".

   "u" (Unicode string) [Py_UNICODE *]
      Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)
      data to a Python Unicode object.  If the Unicode buffer pointer
      is *NULL*, "None" is returned.

   "u#" (Unicode string) [Py_UNICODE *, int]
      Convert a Unicode (UCS-2 or UCS-4) data buffer and its length to
      a Python Unicode object.   If the Unicode buffer pointer is
      *NULL*, the length is ignored and "None" is returned.

   "i" (integer) [int]
      Convert a plain C "int" to a Python integer object.

   "b" (integer) [char]
      Convert a plain C "char" to a Python integer object.

   "h" (integer) [short int]
      Convert a plain C "short int" to a Python integer object.

   "l" (integer) [long int]
      Convertit un "long int" en un int Python.

   "B" (integer) [unsigned char]
      Convert a C "unsigned char" to a Python integer object.

   "H" (integer) [unsigned short int]
      Convert a C "unsigned short int" to a Python integer object.

   "I" (integer/long) [unsigned int]
      Convert a C "unsigned int" to a Python integer object or a
      Python long integer object, if it is larger than "sys.maxint".

   "k" (integer/long) [unsigned long]
      Convert a C "unsigned long" to a Python integer object or a
      Python long integer object, if it is larger than "sys.maxint".

   "L" (long) [PY_LONG_LONG]
      Convert a C "long long" to a Python long integer object. Only
      available on platforms that support "long long".

   "K" (long) [unsigned PY_LONG_LONG]
      Convert a C "unsigned long long" to a Python long integer
      object. Only available on platforms that support "unsigned long
      long".

   "n" (int) [Py_ssize_t]
      Convert a C "Py_ssize_t" to a Python integer or long integer.

      Nouveau dans la version 2.5.

   "c" (string of length 1) [char]
      Convert a C "int" representing a character to a Python string of
      length 1.

   "d" (float) [double]
      Convert a C "double" to a Python floating point number.

   "f" (float) [float]
      Same as "d".

   "D" (complex) [Py_complex *]
      Convert a C "Py_complex" structure to a Python complex number.

   "O" (object) [PyObject *]
      Pass a Python object untouched (except for its reference count,
      which is incremented by one).  If the object passed in is a
      *NULL* pointer, it is assumed that this was caused because the
      call producing the argument found an error and set an exception.
      Therefore, "Py_BuildValue()" will return *NULL* but won’t raise
      an exception.  If no exception has been raised yet,
      "SystemError" is set.

   "S" (object) [PyObject *]
      Same as "O".

   "N" (object) [PyObject *]
      Same as "O", except it doesn’t increment the reference count on
      the object.  Useful when the object is created by a call to an
      object constructor in the argument list.

   "O&" (object) [*converter*, *anything*]
      Convert *anything* to a Python object through a *converter*
      function. The function is called with *anything* (which should
      be compatible with "void *") as its argument and should return a
      « new » Python object, or *NULL* if an error occurred.

   "(items)" (tuple) [*matching-items*]
      Convert a sequence of C values to a Python tuple with the same
      number of items.

   "[items]" (list) [*matching-items*]
      Convert a sequence of C values to a Python list with the same
      number of items.

   "{items}" (dictionary) [*matching-items*]
      Convert a sequence of C values to a Python dictionary.  Each
      pair of consecutive C values adds one item to the dictionary,
      serving as key and value, respectively.

   If there is an error in the format string, the "SystemError"
   exception is set and *NULL* returned.

PyObject* Py_VaBuildValue(const char *format, va_list vargs)

   Identical to "Py_BuildValue()", except that it accepts a va_list
   rather than a variable number of arguments.
